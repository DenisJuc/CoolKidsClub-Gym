<%- include ("../partials/header.ejs") %>
<script src="https://js.stripe.com/v3/"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<style>
	body {
		background-color:#41455D;
	}
  * {
  box-sizing: border-box;
}

.hidden {
  display: none;
}

#payment-message {
  color: rgb(105, 115, 134);
  font-size: 16px;
  line-height: 20px;
  padding-top: 12px;
  text-align: center;
}

#payment-element {
  margin-bottom: 24px;
}

/* Buttons and links */
button {
  background: #5469d4;
  font-family: Arial, sans-serif;
  color: #ffffff;
  border-radius: 4px;
  border: 0;
  padding: 12px 16px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  display: block;
  transition: all 0.2s ease;
  box-shadow: 0px 4px 5.5px 0px rgba(0, 0, 0, 0.07);
  width: 100%;
}
button:hover {
  filter: contrast(115%);
}
button:disabled {
  opacity: 0.5;
  cursor: default;
}

/* spinner/processing state, errors */
.spinner,
.spinner:before,
.spinner:after {
  border-radius: 50%;
}
.spinner {
  color: #ffffff;
  font-size: 22px;
  text-indent: -99999px;
  margin: 0px auto;
  position: relative;
  width: 20px;
  height: 20px;
  box-shadow: inset 0 0 0 2px;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
}
.spinner:before,
.spinner:after {
  position: absolute;
  content: "";
}
.spinner:before {
  width: 10.4px;
  height: 20.4px;
  background: #5469d4;
  border-radius: 20.4px 0 0 20.4px;
  top: -0.2px;
  left: -0.2px;
  -webkit-transform-origin: 10.4px 10.2px;
  transform-origin: 10.4px 10.2px;
  -webkit-animation: loading 2s infinite ease 1.5s;
  animation: loading 2s infinite ease 1.5s;
}
.spinner:after {
  width: 10.4px;
  height: 10.2px;
  background: #5469d4;
  border-radius: 0 10.2px 10.2px 0;
  top: -0.1px;
  left: 10.2px;
  -webkit-transform-origin: 0px 10.2px;
  transform-origin: 0px 10.2px;
  -webkit-animation: loading 2s infinite ease;
  animation: loading 2s infinite ease;
}

@-webkit-keyframes loading {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes loading {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

@media only screen and (max-width: 600px) {
  form {
    width: 80vw;
    min-width: initial;
  }
}
</style>
<section class="h-100 h-custom"  >
  <div class="container h-100 py-5" >
    <div class="row d-flex justify-content-center align-items-center h-100" >
      <div class="col">
        <div class="table-responsive" style="border-radius: 16px;">
          <% let itemsP = []; %>
<% let totalPrice = 0; %>
          <table class="table">
            <thead>
              <tr>
                <th scope="col" class="h5">Mon Panier</th>
                <th scope="col">Spécifications</th>
                <th scope="col">Quantité</th>
                <th scope="col">Prix</th>
              <th scope="col"></th>
              </tr>
            </thead>
            <% items.forEach(function(item){ %>
            <tbody>    
              <tr>
                <th scope="row">
                  <div class="d-flex align-items-center">
                    <img src="/produit<%= item.E_PRIX %>.jpeg" class="img-fluid rounded-3"
                      style="width: 120px;" alt="Book">
                    <div class="flex-column ms-4">
                      <p class="mb-2"><%= item.E_NOM %></p>
                    </div>
                  </div>
                </th>
                <td class="align-middle">
                  <p class="mb-0" style="font-weight: 500;"><%= item.E_CATEGORIE %></p>
                </td>
                <td class="align-middle">
                  <div class="d-flex flex-row">
                    
<input 
id="form1" 
min="0" 
name="quantity" 
value="<%= item.E_QUANTITE %>" 
type="number" 
class="form-control form-control-sm" 
style="width: 50px;" 
data-product-id="<%= item.E_IDPRODUIT %>"
onChange="updateQuantity(this)"
/>                 
<form action="/update-page" method="post">
  <button type="submit" class="btn btn-success">Confirmer</button>
</form>
                  </div>
                  
                </td>
                
                <td class="align-middle">
                  <p class="mb-0" style="font-weight: 500;">$<%= item.E_PRIX %></p>
                </td>
                <td class="align-middle text-center">
                  <div class="d-flex justify-content-center">
                  <form action="/delete-item/<%= item.E_IDPRODUIT %>" method="post">
                    <button type="submit" class="btn btn-danger">X</button>
                  </form>
                </div>
                </td>
              </tr>
            </tbody>
            <% totalPrice += parseFloat(item.E_PRIX)* item.E_QUANTITE; %>
    <% itemsP.push({ id: item.E_IDPRODUIT, amount: parseFloat((item.E_PRIX*100 * item.E_QUANTITE)*(1.15)) });
    const items = itemsP; %>
            <% }); %>
          </table>
        </div>

        <div class="card shadow-2-strong mb-5 mb-lg-0">
          <div class="card-body p-4">
            <% if(totalPrice !=0){ %>
            <div class="row" style="display: flex;justify-content: flex-end;">  
              
                      
                      
              <div class="col-lg-4 col-xl-3">
                <div class="d-flex justify-content-between" style="font-weight: 500;">
                  <p class="mb-2">Subtotal</p>
                  <p class="mb-2" id="subtotal">$<%= totalPrice%></p>
                </div>
        
                <div class="d-flex justify-content-between" style="font-weight: 500;">
                  <p class="mb-2">Shipping</p>
                  <p class="mb-2">$10</p>
                </div>
                
                <div class="d-flex justify-content-between" style="font-weight: 500;">
                  <p class="mb-0">Taxes</p>
                  <p class="mb-0" id="taxes">$<%= ((totalPrice  * 0.14975).toFixed(2)) %></p>
                </div>
                <hr class="my-4">
                <div class="d-flex justify-content-between mb-4" style="font-weight: 500;">
                  <p class="mb-2">Total (avec taxes)</p>
                  <p class="mb-2" id="total">$<%= (parseFloat(totalPrice) + 10 + (parseFloat(totalPrice) * 0.14975)).toFixed(2) %></p>
                </div>
                <button id="myBtn">Payer <%= (parseFloat(totalPrice) + 10 + (parseFloat(totalPrice) * 0.14975)).toFixed(2) %> $</button>
                <div id="myModal" class="modal">
  
                  <!-- Modal content -->
                  <div class="modal-content" style="width: 20%; margin: auto;position: fixed; top: 50%;left: 50%; transform: translateY(-50%) translateX(-50%);padding: 20px; padding-top: 40px;padding-bottom: 40px;">
                    <span class="close">&times;</span>
                    
                    <div style="width: 100%;">             
                      <form class="payment-form" id="payment-form">
                        <div id="payment-element">
                          
                        </div>
                        <div style="text-align: right;">
                          <button type="submit" id="submit">
                            <div class="spinner hidden" id="spinner"></div>
                            <span id="button-text">Payer</span>
                          </button>
                        </div>
                        <div id="payment-message" class="hidden"></div>
                      </form>
                    </div>
                  </div>
                  
                </div>
                  </div>
                
                </div>
                
                <script>
                // Get the modal
                var modal = document.getElementById("myModal");
                
                // Get the button that opens the modal
                var btn = document.getElementById("myBtn");
                
                // Get the <span> element that closes the modal
                var span = document.getElementsByClassName("close")[0];
                
                // When the user clicks the button, open the modal 
                btn.onclick = function() {
                  modal.style.display = "block";
                }
                
                // When the user clicks on <span> (x), close the modal
                span.onclick = function() {
                  modal.style.display = "none";
                }
                
                // When the user clicks anywhere outside of the modal, close it
                window.onclick = function(event) {
                  if (event.target == modal) {
                    modal.style.display = "none";
                  }
                }
                </script>
            </div>
              </div>
            </div>
            <%}%>
          </div>
        </div>

      </div>
    </div>
  </div>
</section>
<script>
  // This is your test publishable API key.
  const stripe = Stripe("pk_test_51OvgtJP5VwBXZgOXDryIBBT5IF0R9MBETSKFGKAThPHCIpht3aQzszoI2uvtQ0ekn0Hw8zDmw0yfYcTMF1sVvSVP00YZW1Mt3y");
  // The items the customer wants to buy
  let items = [];
  <% itemsP.forEach(function(item) { %>
    items.push({ id: "<%= item.id %>", amount: Math.ceil(<%= item.amount %>) });
  <% }); %>
  items.push({id:"shipping", amount: 1000})
let elements;

initialize();
checkStatus();

document
  .querySelector("#payment-form")
  .addEventListener("submit", handleSubmit);

// Fetches a payment intent and captures the client secret
async function initialize() {
  const response = await fetch("/create-payment-intent", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ items }),
  });
  const { clientSecret } = await response.json();

  const appearance = {
    theme: 'stripe',
  };
  elements = stripe.elements({ appearance, clientSecret });

  const paymentElementOptions = {
    layout: "tabs"
  };

  const paymentElement = elements.create("payment", paymentElementOptions);
  paymentElement.mount("#payment-element");
}

async function handleSubmit(e) {
  e.preventDefault();
  setLoading(true);

  const { error } = await stripe.confirmPayment({
    elements,
    confirmParams: {
      // Make sure to change this to your payment completion page
      return_url: "http://localhost:4000/event/confirmation",
    },
  });

  // This point will only be reached if there is an immediate error when
  // confirming the payment. Otherwise, your customer will be redirected to
  // your `return_url`. For some payment methods like iDEAL, your customer will
  // be redirected to an intermediate site first to authorize the payment, then
  // redirected to the `return_url`.
  if (error.type === "card_error" || error.type === "validation_error") {
    showMessage(error.message);
  } else {
    showMessage("An unexpected error occurred.");
  }

  setLoading(false);
}

// Fetches the payment intent status after payment submission
async function checkStatus() {
  const clientSecret = new URLSearchParams(window.location.search).get(
    "payment_intent_client_secret"
  );

  if (!clientSecret) {
    return;
  }

  const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);

  switch (paymentIntent.status) {
    case "succeeded":
      showMessage("Payment succeeded!");
      break;
    case "processing":
      showMessage("Your payment is processing.");
      break;
    case "requires_payment_method":
      showMessage("Your payment was not successful, please try again.");
      break;
    default:
      showMessage("Something went wrong.");
      break;
  }
}

// ------- UI helpers -------

function showMessage(messageText) {
  const messageContainer = document.querySelector("#payment-message");

  messageContainer.classList.remove("hidden");
  messageContainer.textContent = messageText;

  setTimeout(function () {
    messageContainer.classList.add("hidden");
    messageContainer.textContent = "";
  }, 4000);
}

// Show a spinner on payment submission
function setLoading(isLoading) {
  if (isLoading) {
    // Disable the button and show a spinner
    document.querySelector("#submit").disabled = true;
    document.querySelector("#spinner").classList.remove("hidden");
    document.querySelector("#button-text").classList.add("hidden");
  } else {
    document.querySelector("#submit").disabled = false;
    document.querySelector("#spinner").classList.add("hidden");
    document.querySelector("#button-text").classList.remove("hidden");
  }
}

function updateQuantity(input) {
    const productId = input.getAttribute('data-product-id'); // Get the ID of the product
    const newQuantity = input.value; // Get the new quantity

    // Send an AJAX request to the server to update the quantity of the product
    fetch('/update-quantity', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            productId: productId,
            newQuantity: newQuantity,
        }),
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Error updating product quantity');
        }
        // Update the interface
        updateSubtotal(input);
        updateTotal();

        window.location.reload();
    })
    .catch(error => {
        console.error('Error:', error);
    });
}


  
</script>
<%- include("../partials/footer.ejs") %>